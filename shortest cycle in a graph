
#include <bits/stdc++.h>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstring>
#include <chrono>
#include <complex>
#define endl "\n"
#define int long long
#define vi vector<int>
#define vll vector<ll>
#define vvi vector < vi >
#define pii pair<int,int>
#define pll pair<long long, long long>
#define mod 1e15
#define inf 1000000000000000001;
#define all(c) c.begin(),c.end()
#define mp(x,y) make_pair(x,y)
#define mem(a,val) memset(a,val,sizeof(a))
#define eb emplace_back
#define f first
#define s second

using namespace std;


int dx[] = { -1, 0, 0, 1};
int dy[] = {0, 1, -1, 0};



void bfs(int u, int n, int &ans, vector<int>v[])
{

	vector<int>dis(n + 1, INT_MAX);

	queue<int>q;
	q.push(u);
	dis[u] = 0;

	while (!q.empty())
	{

		int node = q.front();
		q.pop();

		for (int i = 0; i < v[node].size(); i++)
		{

			if (dis[v[node][i]] == INT_MAX)
			{
				q.push(v[node][i]);
				dis[v[node][i]] = dis[node] + 1;
			}
			else if (dis[v[node][i]] >= dis[node])
			{
				ans = min(ans, dis[v[node][i]] + dis[node] + 1);
			}
		}
	}
	return;
}

int32_t main()
{
	std::ios::sync_with_stdio(false);

#ifndef ONLINE_JUDGE
	freopen("inputf.in", "r", stdin);
	freopen("outputf.in", "w", stdout);
#endif

	int n, m;
	cin >> n >> m;
	vector<int>v[n + 1];

	for (int i = 0; i < m; i++)
	{
		int x, y;
		cin >> x >> y;
		v[x].push_back(y);
		v[y].push_back(x);
	}

	int ans = n + 1;


	for (int i = 1; i <= n; i++)
	{

		bfs(i, n, ans, v);
	}


	if (ans == n + 1)
		cout << "No cycle found" << endl;
	else
		cout << "shortest cycle length is " << ans << '\n' << endl;
	return 0;
}
